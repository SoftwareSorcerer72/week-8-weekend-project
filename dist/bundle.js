(()=>{"use strict";var e={831:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return d.default}});var r=f(n(518)),o=f(n(948)),u=f(n(73)),i=f(n(186)),a=f(n(808)),d=f(n(775)),s=f(n(37)),l=f(n(910)),c=f(n(792));function f(e){return e&&e.__esModule?e:{default:e}}},311:(e,t)=>{function n(e){return 14+(e+64>>>9<<4)+1}function r(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,o,u,i){return r((a=r(r(t,e),r(o,i)))<<(d=u)|a>>>32-d,n);var a,d}function u(e,t,n,r,u,i,a){return o(t&n|~t&r,e,t,u,i,a)}function i(e,t,n,r,u,i,a){return o(t&r|n&~r,e,t,u,i,a)}function a(e,t,n,r,u,i,a){return o(t^n^r,e,t,u,i,a)}function d(e,t,n,r,u,i,a){return o(n^(t|~r),e,t,u,i,a)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){const t=[],n=32*e.length,r="0123456789abcdef";for(let o=0;o<n;o+=8){const n=e[o>>5]>>>o%32&255,u=parseInt(r.charAt(n>>>4&15)+r.charAt(15&n),16);t.push(u)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[n(t)-1]=t;let o=1732584193,s=-271733879,l=-1732584194,c=271733878;for(let t=0;t<e.length;t+=16){const n=o,f=s,p=l,h=c;o=u(o,s,l,c,e[t],7,-680876936),c=u(c,o,s,l,e[t+1],12,-389564586),l=u(l,c,o,s,e[t+2],17,606105819),s=u(s,l,c,o,e[t+3],22,-1044525330),o=u(o,s,l,c,e[t+4],7,-176418897),c=u(c,o,s,l,e[t+5],12,1200080426),l=u(l,c,o,s,e[t+6],17,-1473231341),s=u(s,l,c,o,e[t+7],22,-45705983),o=u(o,s,l,c,e[t+8],7,1770035416),c=u(c,o,s,l,e[t+9],12,-1958414417),l=u(l,c,o,s,e[t+10],17,-42063),s=u(s,l,c,o,e[t+11],22,-1990404162),o=u(o,s,l,c,e[t+12],7,1804603682),c=u(c,o,s,l,e[t+13],12,-40341101),l=u(l,c,o,s,e[t+14],17,-1502002290),s=u(s,l,c,o,e[t+15],22,1236535329),o=i(o,s,l,c,e[t+1],5,-165796510),c=i(c,o,s,l,e[t+6],9,-1069501632),l=i(l,c,o,s,e[t+11],14,643717713),s=i(s,l,c,o,e[t],20,-373897302),o=i(o,s,l,c,e[t+5],5,-701558691),c=i(c,o,s,l,e[t+10],9,38016083),l=i(l,c,o,s,e[t+15],14,-660478335),s=i(s,l,c,o,e[t+4],20,-405537848),o=i(o,s,l,c,e[t+9],5,568446438),c=i(c,o,s,l,e[t+14],9,-1019803690),l=i(l,c,o,s,e[t+3],14,-187363961),s=i(s,l,c,o,e[t+8],20,1163531501),o=i(o,s,l,c,e[t+13],5,-1444681467),c=i(c,o,s,l,e[t+2],9,-51403784),l=i(l,c,o,s,e[t+7],14,1735328473),s=i(s,l,c,o,e[t+12],20,-1926607734),o=a(o,s,l,c,e[t+5],4,-378558),c=a(c,o,s,l,e[t+8],11,-2022574463),l=a(l,c,o,s,e[t+11],16,1839030562),s=a(s,l,c,o,e[t+14],23,-35309556),o=a(o,s,l,c,e[t+1],4,-1530992060),c=a(c,o,s,l,e[t+4],11,1272893353),l=a(l,c,o,s,e[t+7],16,-155497632),s=a(s,l,c,o,e[t+10],23,-1094730640),o=a(o,s,l,c,e[t+13],4,681279174),c=a(c,o,s,l,e[t],11,-358537222),l=a(l,c,o,s,e[t+3],16,-722521979),s=a(s,l,c,o,e[t+6],23,76029189),o=a(o,s,l,c,e[t+9],4,-640364487),c=a(c,o,s,l,e[t+12],11,-421815835),l=a(l,c,o,s,e[t+15],16,530742520),s=a(s,l,c,o,e[t+2],23,-995338651),o=d(o,s,l,c,e[t],6,-198630844),c=d(c,o,s,l,e[t+7],10,1126891415),l=d(l,c,o,s,e[t+14],15,-1416354905),s=d(s,l,c,o,e[t+5],21,-57434055),o=d(o,s,l,c,e[t+12],6,1700485571),c=d(c,o,s,l,e[t+3],10,-1894986606),l=d(l,c,o,s,e[t+10],15,-1051523),s=d(s,l,c,o,e[t+1],21,-2054922799),o=d(o,s,l,c,e[t+8],6,1873313359),c=d(c,o,s,l,e[t+15],10,-30611744),l=d(l,c,o,s,e[t+6],15,-1560198380),s=d(s,l,c,o,e[t+13],21,1309151649),o=d(o,s,l,c,e[t+4],6,-145523070),c=d(c,o,s,l,e[t+11],10,-1120210379),l=d(l,c,o,s,e[t+2],15,718787259),s=d(s,l,c,o,e[t+9],21,-343485551),o=r(o,n),s=r(s,f),l=r(l,p),c=r(c,h)}return[o,s,l,c]}(function(e){if(0===e.length)return[];const t=8*e.length,r=new Uint32Array(n(t));for(let n=0;n<t;n+=8)r[n>>5]|=(255&e[n/8])<<n%32;return r}(e),8*e.length))}},140:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};t.default=n},808:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default="00000000-0000-0000-0000-000000000000"},792:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(37))&&r.__esModule?r:{default:r};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");let t;const n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n}},656:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},858:(e,t)=>{let n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(r)};const r=new Uint8Array(16)},42:(e,t)=>{function n(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:case 3:return t^n^r;case 2:return t&n^t&r^n&r}}function r(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let n=0;n<t.length;++n)e.push(t.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const u=e.length/4+2,i=Math.ceil(u/16),a=new Array(i);for(let t=0;t<i;++t){const n=new Uint32Array(16);for(let r=0;r<16;++r)n[r]=e[64*t+4*r]<<24|e[64*t+4*r+1]<<16|e[64*t+4*r+2]<<8|e[64*t+4*r+3];a[t]=n}a[i-1][14]=8*(e.length-1)/Math.pow(2,32),a[i-1][14]=Math.floor(a[i-1][14]),a[i-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<i;++e){const u=new Uint32Array(80);for(let t=0;t<16;++t)u[t]=a[e][t];for(let e=16;e<80;++e)u[e]=r(u[e-3]^u[e-8]^u[e-14]^u[e-16],1);let i=o[0],d=o[1],s=o[2],l=o[3],c=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),a=r(i,5)+n(o,d,s,l)+c+t[o]+u[e]>>>0;c=l,l=s,s=r(d,30)>>>0,d=i,i=a}o[0]=o[0]+i>>>0,o[1]=o[1]+d>>>0,o[2]=o[2]+s>>>0,o[3]=o[3]+l>>>0,o[4]=o[4]+c>>>0}return[o[0]>>24&255,o[0]>>16&255,o[0]>>8&255,255&o[0],o[1]>>24&255,o[1]>>16&255,o[1]>>8&255,255&o[1],o[2]>>24&255,o[2]>>16&255,o[2]>>8&255,255&o[2],o[3]>>24&255,o[3]>>16&255,o[3]>>8&255,255&o[3],o[4]>>24&255,o[4]>>16&255,o[4]>>8&255,255&o[4]]}},910:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.unsafeStringify=i;var r,o=(r=n(37))&&r.__esModule?r:{default:r};const u=[];for(let e=0;e<256;++e)u.push((e+256).toString(16).slice(1));function i(e,t=0){return u[e[t+0]]+u[e[t+1]]+u[e[t+2]]+u[e[t+3]]+"-"+u[e[t+4]]+u[e[t+5]]+"-"+u[e[t+6]]+u[e[t+7]]+"-"+u[e[t+8]]+u[e[t+9]]+"-"+u[e[t+10]]+u[e[t+11]]+u[e[t+12]]+u[e[t+13]]+u[e[t+14]]+u[e[t+15]]}t.default=function(e,t=0){const n=i(e,t);if(!(0,o.default)(n))throw TypeError("Stringified UUID is invalid");return n}},518:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(858))&&r.__esModule?r:{default:r},u=n(910);let i,a,d=0,s=0;t.default=function(e,t,n){let r=t&&n||0;const l=t||new Array(16);let c=(e=e||{}).node||i,f=void 0!==e.clockseq?e.clockseq:a;if(null==c||null==f){const t=e.random||(e.rng||o.default)();null==c&&(c=i=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==f&&(f=a=16383&(t[6]<<8|t[7]))}let p=void 0!==e.msecs?e.msecs:Date.now(),h=void 0!==e.nsecs?e.nsecs:s+1;const _=p-d+(h-s)/1e4;if(_<0&&void 0===e.clockseq&&(f=f+1&16383),(_<0||p>d)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");d=p,s=h,a=f,p+=122192928e5;const m=(1e4*(268435455&p)+h)%4294967296;l[r++]=m>>>24&255,l[r++]=m>>>16&255,l[r++]=m>>>8&255,l[r++]=255&m;const y=p/4294967296*1e4&268435455;l[r++]=y>>>8&255,l[r++]=255&y,l[r++]=y>>>24&15|16,l[r++]=y>>>16&255,l[r++]=f>>>8|128,l[r++]=255&f;for(let e=0;e<6;++e)l[r+e]=c[e];return t||(0,u.unsafeStringify)(l)}},948:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(25)),o=u(n(311));function u(e){return e&&e.__esModule?e:{default:e}}var i=(0,r.default)("v3",48,o.default);t.default=i},25:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0,t.default=function(e,t,n){function r(e,r,i,a){var d;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=(0,u.default)(r)),16!==(null===(d=r)||void 0===d?void 0:d.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let s=new Uint8Array(16+e.length);if(s.set(r),s.set(e,r.length),s=n(s),s[6]=15&s[6]|t,s[8]=63&s[8]|128,i){a=a||0;for(let e=0;e<16;++e)i[a+e]=s[e];return i}return(0,o.unsafeStringify)(s)}try{r.name=e}catch(e){}return r.DNS=i,r.URL=a,r};var r,o=n(910),u=(r=n(792))&&r.__esModule?r:{default:r};const i="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=i;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=a},73:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(140)),o=i(n(858)),u=n(910);function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,n){if(r.default.randomUUID&&!t&&!e)return r.default.randomUUID();const i=(e=e||{}).random||(e.rng||o.default)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=i[e];return t}return(0,u.unsafeStringify)(i)}},186:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(25)),o=u(n(42));function u(e){return e&&e.__esModule?e:{default:e}}var i=(0,r.default)("v5",80,o.default);t.default=i},37:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(656))&&r.__esModule?r:{default:r};t.default=function(e){return"string"==typeof e&&o.default.test(e)}},775:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(37))&&r.__esModule?r:{default:r};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var u=t[r]={exports:{}};return e[r](u,u.exports,n),u.exports}(()=>{const e=n(831);class t{constructor(t,n,r){this._id=(0,e.v4)(),this._name=t,this._price=n,this._description=r}itemElement(){const e=document.createElement("div");return e.className="item",e.innerHTML=`\n            <h3>${this._name}</h3>\n            <p>${this._description}</p>\n            <p>Price: $${this._price.toFixed(2)}</p>\n            <button onclick="window.shop.addItemToCart('${this._id}')">Add to Cart</button>\n        `,e}get id(){return this._id}get name(){return this._name}set name(e){this._name=e}get price(){return this._price}set price(e){this._price=e}get description(){return this._description}set description(e){this._description=e}}class r{constructor(t,n){this._id=(0,e.v4)(),this._name=t,this._age=n,this._cart=[]}get id(){return this._id}get name(){return this._name}set name(e){this._name=e}get age(){return this._age}set age(e){this._age=e}get cart(){return this._cart}addToCart(e){this._cart.push(e)}getCartItems(){return this._cart}cartTotal(){return this._cart.reduce(((e,t)=>e+t.price),0)}}class o{constructor(){this._items=[new t("Tesla Model S",79e3,"Electric car"),new t("Mazda CX-5",25e3,"SUV"),new t("Toyota Camry",24e3,"Sedan")],this.displayItems()}displayItems(){const e=document.getElementById("shop");e.innerHTML="",this._items.forEach((t=>e.appendChild(t.itemElement())))}static loginUser(e,t){this.myUser=new r(e,t),document.getElementById("login-section").classList.add("hidden"),document.getElementById("shop-section").classList.remove("hidden")}addItemToCart(e){if(o.myUser){const t=this._items.find((t=>t.id===e));t&&(o.myUser.addToCart(t),this.updateCart())}}updateCart(){const e=document.getElementById("cart");if(e.innerHTML="",o.myUser){o.myUser.getCartItems().forEach((t=>{const n=document.createElement("div");n.innerHTML=`\n                    <h4>${t.name}</h4>\n                    <p>Price: $${t.price.toFixed(2)}</p>\n                `,e.appendChild(n)}));const t=document.createElement("p");t.textContent=`Total: $${o.myUser.cartTotal().toFixed(2)}`,e.appendChild(t)}else e.textContent="Your cart is empty."}}o.myUser=null,window.shop=new o})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,